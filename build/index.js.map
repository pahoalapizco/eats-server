{"version":3,"sources":["../src/index.js"],"names":["mongoose","connect","DATABASE","useCreateIndex","useNewUrlParser","useFindAndModify","mongoDB","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","listen","port","process","env","PORT","then","url"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEAA,qBAASC,OAAT,CAAiBC,gBAAjB,EAA2B;AACzBC,EAAAA,cAAc,EAAE,IADS;AAEzBC,EAAAA,eAAe,EAAE,IAFQ;AAGzBC,EAAAA,gBAAgB,EAAE;AAHO,CAA3B;;AAMA,IAAMC,OAAO,GAAGN,qBAASO,UAAzB;AAEAD,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,qBAA5B,CAApB;AACAH,OAAO,CAACE,EAAR,CAAW,MAAX,EAAmB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,gBAAZ,CAAN;AAAA,CAAnB;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,mBAD8B;AAE9BC,EAAAA,SAAS,EAATA,qBAF8B;AAG9BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,aAAa,EAAEA;AADC,GAHY;AAM9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,GAAT,QAASA,GAAT;AAAA,gDAAmB,6BAAWA,GAAX,CAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AANuB,CAAjB,CAAf;AASAP,MAAM,CAACQ,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB;AAA5B,CAAd,EAAkDC,IAAlD,CAAuD,iBAAa;AAAA,MAAVC,GAAU,SAAVA,GAAU;AAClElB,EAAAA,OAAO,CAACG,GAAR,2BAA+Be,GAA/B;AACD,CAFD","sourcesContent":["import { ApolloServer } from 'apollo-server'\r\nimport mongoose from 'mongoose'\r\nimport typeDefs from './graphql/schemas'\r\nimport resolvers from './graphql/resolvers'\r\nimport { getContext, AuthDirective } from './actions/authActions'\r\nimport { DATABASE } from './config/'\r\n\r\nmongoose.connect(DATABASE, {\r\n  useCreateIndex: true,\r\n  useNewUrlParser: true,\r\n  useFindAndModify: false\r\n})\r\n\r\nconst mongoDB = mongoose.connection\r\n\r\nmongoDB.on('error', console.error.bind(console, 'Error de conexiÃ³n!!'))\r\nmongoDB.on('open', () => console.log('BD conectada!!'))\r\n\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  schemaDirectives: {\r\n    AuthDirective: AuthDirective\r\n  },\r\n  context: async ({ req }) => getContext(req)\r\n})\r\n\r\nserver.listen({ port: process.env.PORT || 8081 }).then(({ url }) => {\r\n  console.log(`Server ready at ${url}`)\r\n})\r\n"],"file":"index.js"}