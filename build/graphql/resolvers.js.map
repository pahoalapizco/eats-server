{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["pubSub","PubSub","PEDIDO_ASIGNADO","resolvers","Subscription","pedidoAsignado","subscribe","parent","args","context","info","asyncIterator","Query","getCategoria","getPlatillos","getRepartidores","getRestaurants","getUser","user","getPedidos","data","filter","pedidos","getPlatillo","platilloID","platillo","getCarrito","_id","carrito","Mutation","addCategoria","img","createReadStream","stream","url","newCategoria","categoria","addPlatillo","newPlatillo","addRestaurant","addRepartidor","newRepartidor","repartidor","addUser","newUser","login","email","password","addPedido","pedido","takePedido","pedidoID","repartidorID","publish","actualizarPedido","Estatus","update","$push","estatus","pedidoActualizado","calificarRepartidor","calificacion","addCarrito","carritoData","usuario","removeCarrito","carritoRemove"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAM,GAAG,IAAIC,oBAAJ,EAAf;AACA,IAAMC,eAAe,GAAG,iBAAxB;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,cAAc,EAAE;AACdC,MAAAA,SAAS,EAAE,mBAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,IAAxB;AAAA,eAAiCV,MAAM,CAACW,aAAP,CAAqB,CAACT,eAAD,CAArB,CAAjC;AAAA;AADG;AADJ,GADE;AAMhBU,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY;AAAA;AAAA;AAAA,mCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkB,qCAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADP;AAELC,IAAAA,YAAY;AAAA;AAAA;AAAA,mCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkB,oCAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAFP;AAGLC,IAAAA,eAAe;AAAA;AAAA;AAAA,mCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkB,yCAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAHV;AAILC,IAAAA,cAAc;AAAA;AAAA;AAAA,mCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkB,wCAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAJT;AAKLC,IAAAA,OAAO;AAAA;AAAA;AAAA,mCAAE,kBAAOV,MAAP,EAAeC,IAAf,QAA+BE,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuBQ,gBAAAA,IAAvB,QAAuBA,IAAvB;AAAA;AAAA,kDAEEA,IAFF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OALF;AAYLC,IAAAA,UAAU;AAAA;AAAA;AAAA,mCAAE,kBAAOZ,MAAP,SAAyBE,OAAzB,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBU,gBAAAA,IAAjB,SAAiBA,IAAjB;AAAA;AAEFC,gBAAAA,MAFE,qBAEYD,IAFZ;AAAA;AAAA,uBAGc,gCAAWC,MAAX,CAHd;;AAAA;AAGFC,gBAAAA,OAHE;AAAA,kDAIDA,OAJC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAZL;AAqBLC,IAAAA,WAAW;AAAA;AAAA;AAAA,mCAAE,kBAAOhB,MAAP,SAA+BE,OAA/B,EAAwCC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBc,gBAAAA,UAAjB,SAAiBA,UAAjB;AAAA;AAAA;AAAA,uBAEc,kCAAYA,UAAZ,CAFd;;AAAA;AAEHC,gBAAAA,QAFG;AAAA,kDAGFA,QAHE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OArBN;AA6BLC,IAAAA,UAAU;AAAA;AAAA;AAAA,mCAAE,kBAAOnB,MAAP,EAAeC,IAAf,SAA+BE,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuBQ,gBAAAA,IAAvB,SAAuBA,IAAvB;AAAA;AAAA;AAAA,uBAEc,gCAAWA,IAAI,CAACS,GAAhB,CAFd;;AAAA;AAEFC,gBAAAA,OAFE;AAAA,kDAGDA,OAHC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA7BL,GANS;AA4ChBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY;AAAA;AAAA;AAAA,mCAAE,kBAAOvB,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,SAAiBA,IAAjB;AAAA;;AAAA,qBAGNA,IAAI,CAACW,GAHC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAI4BX,IAAI,CAACW,GAJjC;;AAAA;AAAA;AAIAC,gBAAAA,gBAJA,SAIAA,gBAJA;AAKFC,gBAAAA,MALE,GAKOD,gBAAgB,EALvB;AAAA;AAAA,uBAMc,wBAAYC,MAAZ,CANd;;AAAA;AAAA;AAMAC,gBAAAA,GANA,SAMAA,GANA;AAORC,gBAAAA,YAAY,qBACPf,IADO;AAEVW,kBAAAA,GAAG,EAAEG;AAFK,kBAAZ;AAPQ;AAAA;;AAAA;AAYRC,gBAAAA,YAAY,GAAGf,IAAf;;AAZQ;AAAA;AAAA,uBAcc,oCAAae,YAAb,CAdd;;AAAA;AAcJC,gBAAAA,SAdI;AAAA,kDAeHA,SAfG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADJ;AAqBRC,IAAAA,WAAW;AAAA;AAAA;AAAA,mCAAE,mBAAO9B,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,SAAiBA,IAAjB;AAAA;;AAAA,qBAGLA,IAAI,CAACW,GAHA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAI6BX,IAAI,CAACW,GAJlC;;AAAA;AAAA;AAICC,gBAAAA,gBAJD,SAICA,gBAJD;AAKDC,gBAAAA,MALC,GAKQD,gBAAgB,EALxB;AAAA;AAAA,uBAMe,wBAAYC,MAAZ,CANf;;AAAA;AAAA;AAMCC,gBAAAA,GAND,UAMCA,GAND;AAOPI,gBAAAA,WAAW,qBACNlB,IADM;AAETW,kBAAAA,GAAG,EAAEG;AAFI,kBAAX;AAPO;AAAA;;AAAA;AAYPI,gBAAAA,WAAW,GAAGlB,IAAd;;AAZO;AAAA;AAAA,uBAcc,qCAAekB,WAAf,CAdd;;AAAA;AAcHb,gBAAAA,QAdG;AAAA,mDAeFA,QAfE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OArBH;AAyCRc,IAAAA,aAAa;AAAA;AAAA;AAAA,mCAAE,mBAAOhC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,UAAiBA,IAAjB;AAAA;AAAA,uBAAkC,sCAAcA,IAAd,CAAlC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAzCL;AA0CRoB,IAAAA,aAAa;AAAA;AAAA;AAAA,mCAAE,mBAAOjC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,UAAiBA,IAAjB;AAAA;;AAAA,qBAGPA,IAAI,CAACW,GAHE;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAI2BX,IAAI,CAACW,GAJhC;;AAAA;AAAA;AAIDC,gBAAAA,gBAJC,UAIDA,gBAJC;AAKHC,gBAAAA,MALG,GAKMD,gBAAgB,EALtB;AAAA;AAAA,uBAMa,wBAAYC,MAAZ,CANb;;AAAA;AAAA;AAMDC,gBAAAA,GANC,UAMDA,GANC;AAOTO,gBAAAA,aAAa,qBACRrB,IADQ;AAEXW,kBAAAA,GAAG,EAAEG;AAFM,kBAAb;AAPS;AAAA;;AAAA;AAYTO,gBAAAA,aAAa,GAAGrB,IAAhB;;AAZS;AAAA;AAAA,uBAec,yCAAiBqB,aAAjB,CAfd;;AAAA;AAeLC,gBAAAA,UAfK;AAAA,mDAgBJA,UAhBI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OA1CL;AA+DRC,IAAAA,OAAO;AAAA;AAAA;AAAA,mCAAE,mBAAOpC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,UAAiBA,IAAjB;AAAA;;AAAA,qBAGDA,IAAI,CAACW,GAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAIiCX,IAAI,CAACW,GAJtC;;AAAA;AAAA;AAIKC,gBAAAA,gBAJL,UAIKA,gBAJL;AAKGC,gBAAAA,MALH,GAKYD,gBAAgB,EAL5B;AAAA;AAAA,uBAMmB,wBAAYC,MAAZ,CANnB;;AAAA;AAAA;AAMKC,gBAAAA,GANL,UAMKA,GANL;AAOHU,gBAAAA,OAAO,qBACFxB,IADE;AAELW,kBAAAA,GAAG,EAAEG;AAFA,kBAAP;AAPG;AAAA;;AAAA;AAYHU,gBAAAA,OAAO,GAAGxB,IAAV;;AAZG;AAAA;AAAA,uBAcc,gCAAWwB,OAAX,CAdd;;AAAA;AAcC1B,gBAAAA,IAdD;AAAA,mDAeEA,IAfF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OA/DC;AAoFR2B,IAAAA,KAAK;AAAA;AAAA;AAAA,mCAAE,mBAAOtC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBuC,gBAAAA,KAAjB,UAAiBA,KAAjB,EAAwBC,QAAxB,UAAwBA,QAAxB;AAAA;AAAA;AAAA,uBAEgB,2BAAMD,KAAN,EAAaC,QAAb,CAFhB;;AAAA;AAEG7B,gBAAAA,IAFH;AAAA,mDAGIA,IAHJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OApFG;AA4FR8B,IAAAA,SAAS;AAAA;AAAA;AAAA,mCAAE,mBAAOzC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,UAAiBA,IAAjB;AAAA;AAAA;AAAA,uBAEc,+BAAUA,IAAV,CAFd;;AAAA;AAED6B,gBAAAA,MAFC;AAAA,mDAGAA,MAHA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OA5FD;AAoGRC,IAAAA,UAAU;AAAA;AAAA;AAAA,mCAAE,mBAAO3C,MAAP,UAA2CE,OAA3C,EAAoDC,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiByC,gBAAAA,QAAjB,UAAiBA,QAAjB,EAA2BC,YAA3B,UAA2BA,YAA3B;AAAA;AAAA;AAAA,uBAEa,gCAAWD,QAAX,EAAqBC,YAArB,CAFb;;AAAA;AAEFH,gBAAAA,MAFE;AAAA;AAAA,uBAGiB,sCAAcG,YAAd,CAHjB;;AAAA;AAGFV,gBAAAA,UAHE;AAIR1C,gBAAAA,MAAM,CAACqD,OAAP,CAAenD,eAAf,EAAgC;AAAEG,kBAAAA,cAAc,EAAEqC;AAAlB,iBAAhC;AAJQ,mDAKDO,MALC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OApGF;AA8GRK,IAAAA,gBAAgB;AAAA;AAAA;AAAA,mCAAE,mBAAO/C,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiB4C,gBAAAA,QAAjB,UAAiBA,QAAjB,EAA2BI,OAA3B,UAA2BA,OAA3B;AAAA;AAERlC,gBAAAA,MAFQ,GAEC;AAAEM,kBAAAA,GAAG,EAAEwB;AAAP,iBAFD;AAGRK,gBAAAA,MAHQ,GAGC;AAAEC,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,OAAO,EAAEH;AAAX;AAAT,iBAHD;AAAA;AAAA,uBAIkB,kCAAalC,MAAb,EAAqBmC,MAArB,CAJlB;;AAAA;AAIRG,gBAAAA,iBAJQ;AAAA,mDAKPA,iBALO;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OA9GR;AAwHRC,IAAAA,mBAAmB;AAAA;AAAA;AAAA,mCAAE,mBAAOrD,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBa,gBAAAA,IAAjB,UAAiBA,IAAjB;AAAA;AAAA;AAAA,uBAEU,8CAAoBA,IAApB,CAFV;;AAAA;AAEXyC,gBAAAA,YAFW;AAAA,mDAGVA,YAHU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAxHX;AAgIRC,IAAAA,UAAU;AAAA;AAAA;AAAA,mCAAE,mBAAOvD,MAAP,kBAAmCG,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBU,gBAAAA,IAAjB,UAAiBA,IAAjB;AAA2BF,gBAAAA,IAA3B,UAA2BA,IAA3B;AAAA;AAEF6C,gBAAAA,WAFE,qBAGH3C,IAHG;AAIN4C,kBAAAA,OAAO,EAAE9C,IAAI,CAACS;AAJR;AAAA;AAAA,uBAMc,gCAAWoC,WAAX,CANd;;AAAA;AAMFnC,gBAAAA,OANE;AAAA,mDAODA,OAPC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAhIF;AA4IRqC,IAAAA,aAAa;AAAA;AAAA;AAAA,mCAAE,mBAAO1D,MAAP,EAAeC,IAAf,UAA+BE,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuBQ,gBAAAA,IAAvB,UAAuBA,IAAvB;AAAA;AAAA;AAAA,uBAEiB,mCAAcA,IAAI,CAACS,GAAnB,CAFjB;;AAAA;AAELuC,gBAAAA,aAFK;AAAA,mDAGJA,aAHI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5IL;AA5CM,CAAlB;eAmMe/D,S","sourcesContent":["import { createPlatillo, getPlatillos, getPlatillo } from '../actions/platilloActions'\r\nimport { createRepartidor, getRepartidores, getRepartidor } from '../actions/repartidorActions'\r\nimport { addRestaurant, getRestaurants } from '../actions/restaurantActions'\r\nimport { createUser, login } from '../actions/usuarioActions'\r\nimport { addPedido, getPedidos, takePedido, updatePedido } from '../actions/pedidosActions'\r\nimport { getCategoria, addCategoria } from '../actions/categoriaActions'\r\nimport { calificarRepartidor } from '../actions/calificacionActions'\r\nimport { addCarrito, getCarrito, removeCarrito } from '../actions/carritoActions'\r\nimport { PubSub } from 'apollo-server'\r\nimport { storeUpload } from '../utils'\r\n\r\nconst pubSub = new PubSub()\r\nconst PEDIDO_ASIGNADO = 'PEDIDO_ASIGNADO'\r\n\r\nconst resolvers = {\r\n  Subscription: {\r\n    pedidoAsignado: {\r\n      subscribe: (parent, args, context, info) => pubSub.asyncIterator([PEDIDO_ASIGNADO])\r\n    }\r\n  },\r\n  Query: {\r\n    getCategoria: async () => await getCategoria(),\r\n    getPlatillos: async () => await getPlatillos(),\r\n    getRepartidores: async () => await getRepartidores(),\r\n    getRestaurants: async () => await getRestaurants(),\r\n    getUser: async (parent, args, { user }, info) =>{\r\n      try {\r\n        return user\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    getPedidos: async (parent, { data }, context, info) => {\r\n      try {\r\n        const filter = { ...data }\r\n        const pedidos = await getPedidos(filter)\r\n        return pedidos\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    getPlatillo: async (parent, { platilloID }, context, info) => {\r\n      try {\r\n        const platillo = await getPlatillo(platilloID)\r\n        return platillo\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    getCarrito: async (parent, args, { user }, info) => {\r\n      try {\r\n        const carrito = await getCarrito(user._id)\r\n        return carrito\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    }\r\n  },\r\n  Mutation: {\r\n    addCategoria: async (parent, { data }) => {\r\n      try {\r\n        let newCategoria\r\n        if (data.img) {\r\n          const { createReadStream  } = await data.img\r\n          const stream = createReadStream()        \r\n          const { url } = await storeUpload(stream)\r\n          newCategoria = {\r\n            ...data,\r\n            img: url\r\n          }\r\n        } else {\r\n          newCategoria = data\r\n        }        \r\n        const categoria = await addCategoria(newCategoria)\r\n        return categoria\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    addPlatillo: async (parent, { data }) => {\r\n      try {\r\n        let newPlatillo\r\n        if (data.img) {\r\n          const { createReadStream  } = await data.img\r\n          const stream = createReadStream()        \r\n          const { url } = await storeUpload(stream)\r\n          newPlatillo = {\r\n            ...data,\r\n            img: url\r\n          }\r\n        } else {\r\n          newPlatillo = data\r\n        }\r\n        const platillo = await createPlatillo(newPlatillo)\r\n        return platillo\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    addRestaurant: async (parent, { data }) => await addRestaurant(data),\r\n    addRepartidor: async (parent, { data }) => {\r\n      try {\r\n        let newRepartidor\r\n        if (data.img) {\r\n          const { createReadStream  } = await data.img\r\n          const stream = createReadStream()        \r\n          const { url } = await storeUpload(stream)\r\n          newRepartidor = {\r\n            ...data,\r\n            img: url\r\n          }\r\n        } else {\r\n          newRepartidor = data\r\n        }\r\n\r\n        const repartidor = await createRepartidor(newRepartidor)\r\n        return repartidor\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    addUser: async (parent, { data }) => {\r\n      try {\r\n        let newUser\r\n        if (data.img) {\r\n          const { createReadStream  } = await data.img\r\n          const stream = createReadStream()        \r\n          const { url } = await storeUpload(stream)\r\n          newUser = {\r\n            ...data,\r\n            img: url\r\n          }\r\n        } else {\r\n          newUser = data\r\n        }\r\n        const user = await createUser(newUser)\r\n        return user\r\n      } catch (error) {\r\n        return error\r\n      }\r\n\r\n    },\r\n    login: async (parent, { email, password }) => {\r\n      try {\r\n        const user = await login(email, password)\r\n        return user\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    addPedido: async (parent, { data }) => {\r\n      try {\r\n        const pedido = await addPedido(data)\r\n        return pedido\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    takePedido: async (parent, { pedidoID, repartidorID }, context, info) => {\r\n      try {\r\n        const pedido = await takePedido(pedidoID, repartidorID)\r\n        const repartidor = await getRepartidor(repartidorID)\r\n        pubSub.publish(PEDIDO_ASIGNADO, { pedidoAsignado: repartidor })\r\n        return pedido\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    actualizarPedido: async (parent, { pedidoID, Estatus }) => {\r\n      try {\r\n        const filter = { _id: pedidoID }\r\n        const update = { $push: { estatus: Estatus } }\r\n        const pedidoActualizado = await updatePedido(filter, update)\r\n        return pedidoActualizado\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    calificarRepartidor: async (parent, { data }) => {\r\n      try {\r\n        const calificacion = await calificarRepartidor(data)\r\n        return calificacion\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    addCarrito: async (parent, { data }, { user }, info) => {\r\n      try {\r\n        const carritoData = {\r\n          ...data,\r\n          usuario: user._id\r\n        }\r\n        const carrito = await addCarrito(carritoData)\r\n        return carrito\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    },\r\n    removeCarrito: async (parent, args, { user }, info) => {\r\n      try {\r\n        const carritoRemove = await removeCarrito(user._id)\r\n        return carritoRemove\r\n      } catch (error) {\r\n        return error\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default resolvers\r\n"],"file":"resolvers.js"}