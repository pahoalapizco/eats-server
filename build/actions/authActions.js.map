{"version":3,"sources":["../../src/actions/authActions.js"],"names":["JWT","require","SchemaDirectiveVisitor","AuthenticationError","AuthDirective","field","resolve","defaultFieldResolver","args","ctx","user","apply","getContext","req","token","headers","authorization","undefined","verify","SECRET","err","result","_id","error","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;eAEwDA,OAAO,CAAC,uBAAD,C;IAAvDC,sB,YAAAA,sB;IAAwBC,mB,YAAAA,mB,EAEhC;;;IACMC,a;;;;;;;;;;;;yCACkBC,K,EAAO;AAAA,2BACgBA,KADhB,CACnBC,OADmB;AAAA,UACnBA,OADmB,+BACTC,oBADS;AAE3BF,MAAAA,KAAK,CAACC,OAAN;AAAA;AAAA;AAAA;AAAA,mCAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAmBE,IAAnB;AAAmBA,kBAAAA,IAAnB;AAAA;;AACRC,gBAAAA,GADQ,GACFD,IAAI,CAAC,CAAD,CADF;;AAAA,qBAEVC,GAAG,CAACC,IAFM;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGCJ,OAAO,CAACK,KAAR,CAAc,IAAd,EAAoBH,IAApB,CAHD;;AAAA;AAAA;;AAAA;AAAA,sBAKN,IAAIL,mBAAJ,CAAwB,2BAAxB,CALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;AAQD;;;EAXyBD,sB,GAc5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1B,MAAI;AACF,QAAMC,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAYC,aAA1B;;AACA,QAAI,yBAAOF,KAAP,cAAwBG,SAAxB,0DAAwBA,SAAxB,EAAJ,EAAuC;AAAE,aAAOJ,GAAP;AAAY;;AACrD,WAAOb,GAAG,CAACkB,MAAJ,CAAWJ,KAAX,EAAkBK,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA0B,kBAAgBC,GAAhB,EAAqBC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC3BD,GAD2B;AAAA;AAAA;AAAA;;AAAA,kDACbP,GADa;;AAAA;AAAA;AAAA;AAAA,uBAGV,6BAAQ;AAAES,kBAAAA,GAAG,EAAED,MAAM,CAACC;AAAd,iBAAR,CAHU;;AAAA;AAGvBZ,gBAAAA,IAHuB;AAAA,oEAIjBG,GAJiB;AAIZH,kBAAAA,IAAI,EAAJA;AAJY;;AAAA;AAAA;AAAA;AAAA,kDAMtBG,GANsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1B;;AAAA;AAAA;AAAA;AAAA,QAAP;AASD,GAZD,CAYE,OAAOU,KAAP,EAAc;AACd,WAAOV,GAAP;AACD;AACF,CAhBD;;AAkBAW,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,UAAU,EAAVA,UADe;AAEfR,EAAAA,aAAa,EAAbA;AAFe,CAAjB","sourcesContent":["import { getUser } from '../actions/usuarioActions'\r\nimport { SECRET } from '../config/'\r\n\r\nconst JWT = require('jsonwebtoken')\r\n\r\nconst { SchemaDirectiveVisitor, AuthenticationError } = require('apollo-server-express')\r\n\r\n// directiva - valida si esta query necesita un token, de lo contrario no permite ejecutar la consulta\r\nclass AuthDirective extends SchemaDirectiveVisitor {\r\n  visitFieldDefinition (field) {\r\n    const { resolve = defaultFieldResolver } = field\r\n    field.resolve = async function (...args) {\r\n      const ctx = args[2]\r\n      if (ctx.user) {\r\n        return await resolve.apply(this, args)\r\n      } else {\r\n        throw new AuthenticationError('You need to be logged in.')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// contexto\r\n// para autorizar request se hacen los siguientes pasos\r\n// paso 1 - saca el autorization de los headers en el request\r\n// paso 2 - valida si el header token esta indefinido\r\n// paso 3 - verifica que el token sea valido\r\n// paso 4 - si es un token valido busca al usuario en la base de datos y asigna la informacion del usuario en el contexto\r\n// paso 5 - si hay algun error siempre regresa lo que trae req\r\nconst getContext = (req) => {\r\n  try {\r\n    const token = req.headers.authorization\r\n    if (typeof token === typeof undefined) { return req }\r\n    return JWT.verify(token, SECRET, async function (err, result) {\r\n      if (err) { return req }\r\n      try {\r\n        const user = await getUser({ _id: result._id })\r\n        return { ...req, user }\r\n      } catch (e) {\r\n        return req\r\n      }\r\n    })\r\n  } catch (error) {\r\n    return req\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getContext,\r\n  AuthDirective\r\n}\r\n"],"file":"authActions.js"}