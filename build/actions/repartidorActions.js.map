{"version":3,"sources":["../../src/actions/repartidorActions.js"],"names":["createRepartidor","repartidor","RepartidorModel","create","newRepartidor","getRepartidores","find","populate","exec","repartidores","calcularCalificacion","getRepartidor","repartidorID","findOne","_id","totalEstrellas","calificaciones","forEach","calificacion","estrellas","totalCalificaciones","length","promedio","updateRepartidor","filter","update","findOneAndUpdate","repartidorActualizado","index","module","exports"],"mappings":"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","sourcesContent":["import { RepartidorModel } from '../database/models'\r\nimport { isArray } from 'util'\r\n\r\nconst createRepartidor = async (repartidor) => {\r\n  try {\r\n    const newRepartidor = await RepartidorModel.create(repartidor)\r\n    return newRepartidor\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst getRepartidores = async () => {\r\n  try {\r\n    const repartidores = await RepartidorModel.find()\r\n      .populate('pedidos')\r\n      .populate('calificaciones')\r\n      .exec()\r\n\r\n    return calcularCalificacion(repartidores)\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst getRepartidor = async (repartidorID) => {\r\n  try {\r\n    const repartidor = await RepartidorModel.findOne({ _id: repartidorID })\r\n      .populate('pedidos')\r\n      .populate('calificaciones')\r\n      .exec()\r\n\r\n    let totalEstrellas = 0\r\n    repartidor.calificaciones.forEach(calificacion => {\r\n      totalEstrellas += calificacion.estrellas\r\n    })\r\n    const totalCalificaciones = repartidor.calificaciones.length === 0 ? 1 : repartidor.calificaciones.length\r\n    repartidor.promedio = totalEstrellas / totalCalificaciones\r\n\r\n    return repartidor\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst updateRepartidor = async (filter, update) => {\r\n  try {\r\n    const repartidorActualizado = await RepartidorModel.findOneAndUpdate(filter, update, { new: true })\r\n    return repartidorActualizado\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst calcularCalificacion = (repartidores) => {\r\n  repartidores.forEach((repartidor, index) => {\r\n    let totalEstrellas = 0\r\n    repartidor.calificaciones.forEach(calificacion => {\r\n      totalEstrellas += calificacion.estrellas\r\n    })\r\n    const totalCalificaciones = repartidor.calificaciones.length === 0 ? 1 : repartidor.calificaciones.length\r\n    repartidores[index].promedio = totalEstrellas / totalCalificaciones\r\n  })\r\n  return repartidores\r\n}\r\n\r\nmodule.exports = {\r\n  createRepartidor,\r\n  getRepartidores,\r\n  updateRepartidor,\r\n  getRepartidor\r\n}\r\n"],"file":"repartidorActions.js"}