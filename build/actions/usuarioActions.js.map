{"version":3,"sources":["../../src/actions/usuarioActions.js"],"names":["Date","prototype","addDay","days","day","valueOf","setDate","getDate","createToken","user","expiration","getTime","payload","_id","email","name","lastname","token","jwt","sign","SECRET","createUser","UserModel","create","newUser","getUser","findOne","login","password","bcrypt","compareSync","module","exports"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;AACAA,IAAI,CAACC,SAAL,CAAeC,MAAf,GAAwB,UAAUC,IAAV,EAAgB;AACtC,MAAMC,GAAG,GAAG,IAAIJ,IAAJ,CAAS,KAAKK,OAAL,EAAT,CAAZ;AACAD,EAAAA,GAAG,CAACE,OAAJ,CAAYF,GAAG,CAACG,OAAJ,KAAgBJ,IAA5B;AACA,SAAOC,GAAP;AACD,CAJD;;AAMA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC1B,MAAMC,UAAU,GAAG,IAAIV,IAAJ,GAAWE,MAAX,CAAkB,CAAlB,EAAqBS,OAArB,EAAnB;AACA,MAAMC,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEJ,IAAI,CAACI,GADI;AAEdC,IAAAA,KAAK,EAAEL,IAAI,CAACK,KAFE;AAGdC,IAAAA,IAAI,EAAEN,IAAI,CAACM,IAHG;AAIdC,IAAAA,QAAQ,EAAEP,IAAI,CAACO,QAJD;AAKdN,IAAAA,UAAU,EAAVA;AALc,GAAhB;;AAOA,MAAMO,KAAK,GAAGC,yBAAIC,IAAJ,CAASP,OAAT,EAAkBQ,cAAlB,CAAd;;AACA,SAAO;AAAEH,IAAAA,KAAK,EAALA;AAAF,GAAP;AACD,CAXD;;AAaA,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOZ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEOa,kBAAUC,MAAV,CAAiBd,IAAjB,CAFP;;AAAA;AAETe,YAAAA,OAFS;AAAA,6CAGRhB,WAAW,CAACgB,OAAD,CAHH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVH,UAAU;AAAA;AAAA;AAAA,GAAhB;;AASA,IAAMI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAOZ,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECS,kBAAUI,OAAV,CAAkB;AAAEb,cAAAA,GAAG,EAAHA;AAAF,aAAlB,CAFD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPY,OAAO;AAAA;AAAA;AAAA,GAAb;;AAQA,IAAME,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAOb,KAAP,EAAcc,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAESN,kBAAUI,OAAV,CAAkB;AAAEZ,cAAAA,KAAK,EAALA;AAAF,aAAlB,CAFT;;AAAA;AAEJL,YAAAA,IAFI;;AAAA,kBAGN,CAACA,IAAD,IAAS,CAACoB,mBAAOC,WAAP,CAAmBF,QAAnB,EAA6BnB,IAAI,CAACmB,QAAlC,CAHJ;AAAA;AAAA;AAAA;;AAAA,8CAG0D,IAH1D;;AAAA;AAAA,8CAKHpB,WAAW,CAACC,IAAD,CALR;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALkB,KAAK;AAAA;AAAA;AAAA,GAAX;;AAWAI,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,UAAU,EAAVA,UADe;AAEfI,EAAAA,OAAO,EAAPA,OAFe;AAGfE,EAAAA,KAAK,EAALA;AAHe,CAAjB","sourcesContent":["import { UserModel } from '../database/models'\r\nimport bcrypt from 'bcrypt'\r\nimport jwt from 'jsonwebtoken'\r\nimport { SECRET } from '../config/'\r\n// Agrega función a Date para agregarle días al día actual.\r\nDate.prototype.addDay = function (days) {\r\n  const day = new Date(this.valueOf())\r\n  day.setDate(day.getDate() + days)\r\n  return day\r\n}\r\n\r\nconst createToken = user => {\r\n  const expiration = new Date().addDay(5).getTime()\r\n  const payload = {\r\n    _id: user._id,\r\n    email: user.email,\r\n    name: user.name,\r\n    lastname: user.lastname,\r\n    expiration\r\n  }\r\n  const token = jwt.sign(payload, SECRET)\r\n  return { token }\r\n}\r\n\r\nconst createUser = async (user) => {\r\n  try {\r\n    const newUser = await UserModel.create(user)\r\n    return createToken(newUser)\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst getUser = async (_id) => {\r\n  try {\r\n    return await UserModel.findOne({ _id })\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nconst login = async (email, password) => {\r\n  try {\r\n    const user = await UserModel.findOne({ email })\r\n    if (!user || !bcrypt.compareSync(password, user.password)) { return null }\r\n\r\n    return createToken(user)\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  createUser,\r\n  getUser,\r\n  login\r\n}\r\n"],"file":"usuarioActions.js"}