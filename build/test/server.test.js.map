{"version":3,"sources":["../../src/test/server.test.js"],"names":["should","require","request","HOST","token","restauranteID","categoriaID","platilloID","repartidorID","pedidoID","describe","test","done","json","query","variables","data","name","lastname","email","password","phonenumber","post","url","err","res","body","not","exist","expect","statusCode","toBe","have","property","addUser","toBeNull","login","headers","Authorization","getUser","addRepartidor","vehiculo","be","an","_id","getRepartidores","lengthOf","address","open","closed","addRestaurant","getRestaurants","addCategoria","getCategoria","description","price","restaurant","categoria","addPlatillo","getPlatillos","getPlatillo","total","metodoPago","detail","platillo","cantidad","importe","addPedido","getPedidos"],"mappings":"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","sourcesContent":["const should = require(\"chai\").should();\r\n\r\nconst request = require(\"request\");\r\nrequire(\"../index\");\r\nrequire(\"isomorphic-fetch\");\r\n\r\nconst HOST = \"http://localhost:5000/graphql\";\r\n\r\n// Variables para _id's que se requieren en test posteriores,\r\nlet token, restauranteID, categoriaID, platilloID, repartidorID, pedidoID;\r\n\r\ndescribe(\"[USUARIOS]\", () => {\r\n  test(\"Crear usuario\", done => {\r\n    const json = {\r\n      query: \"mutation($data:UserInput){ addUser(data:$data){ token } }\",\r\n      variables: {\r\n        data: {\r\n          name: \"user test\",\r\n          lastname: \"jest test\",\r\n          email: \"test.test\",\r\n          password: \"123\",\r\n          phonenumber: \"123456890\"\r\n        }\r\n      }\r\n    };\r\n\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addUser.token).not.toBeNull();  \r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n\r\n  test(\"Usuario creado inicia sesión\", done => {\r\n    const json = {\r\n      query:\r\n        \"mutation($email:String, $password:String){ login(email:$email, password:$password){ token } }\",\r\n      variables: {\r\n        email: \"test.test\",\r\n        password: \"123\"\r\n      }\r\n    };\r\n\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.login.token).not.toBeNull();\r\n        token = body.data.login.token;\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n\r\n  test(\"Debe obtener al usuario en sesión\", done => {\r\n    const json = {\r\n      query: \"{ getUser { name, lastname } }\"\r\n    };\r\n\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json,\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getUser).not.toBeNull();\r\n        // body.data.should.have.property('getUser').with.lengthOf(1)\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\ndescribe(\"[REPARTIDORES]\", () => {\r\n  test(\"Debe crear un repartidor\", done => {\r\n    const json = {\r\n      query:\r\n        \"mutation($data:RepartidorInput){ addRepartidor(data:$data){ _id, vehiculo } }\",\r\n      variables: {\r\n        data: {\r\n          name: \"user test\",\r\n          lastname: \"jest test\",\r\n          phonenumber: \"123456890\"\r\n        }\r\n      }\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addRepartidor).not.toBeNull();\r\n        expect(body.data.addRepartidor.vehiculo).toBe(\"Motocicleta\");\r\n        body.data.addRepartidor.should.be.an('object')\r\n        repartidorID = body.data.addRepartidor._id;\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n  test('Debe obtener un arreglo de repartidores', (done) => {\r\n    const json = {\r\n      query: \"{ getRepartidores { _id, name }}\"\r\n    }\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getRepartidores).not.toBeNull();\r\n        body.data.should.have.property('getRepartidores').with.lengthOf(1) \r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n});\r\n\r\ndescribe(\"[RESTAURANTES]\", () => {\r\n  test(\"Debe crear un restaurante\", done => {\r\n    const json = {\r\n      query:\r\n        \"mutation($data:RestaurantInput){ addRestaurant(data:$data){ _id, name } }\",\r\n      variables: {\r\n        data: {\r\n          name: \"restaurant test\",\r\n          address: \"address test\",\r\n          open: \"10:00\",\r\n          closed: \"18:00\",\r\n          phonenumber: \"123456890\"\r\n        }\r\n      }\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addRestaurant._id).not.toBeNull();\r\n        body.data.addRestaurant.should.be.an('object')\r\n        restauranteID = body.data.addRestaurant._id;\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n\r\n  test(\"Debe obtener un arreglo de restaurantes\", done => {\r\n    const json = {\r\n      query: \"{ getRestaurants { _id, name } }\"\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getRestaurants).not.toBeNull();\r\n        body.data.should.have.property('getRestaurants').with.lengthOf(1)\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\ndescribe(\"[CATEGORIAS]\", () => {\r\n  test(\"Crear categoria\", done => {\r\n    const json = {\r\n      query:\r\n        \"mutation($data:CategoriaInput){ addCategoria(data:$data){ _id, name } }\",\r\n      variables: {\r\n        data: {\r\n          name: \"categoria test\"\r\n        }\r\n      }\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addCategoria._id).not.toBeNull();\r\n        body.data.addCategoria.should.be.an('object')\r\n        categoriaID = body.data.addCategoria._id;\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n  test(\"Debe obtener un arrego de categorias\", done => {\r\n    const json = {\r\n      query: \"{ getCategoria { _id, name } }\"\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getCategoria).not.toBeNull();\r\n        body.data.should.have.property('getCategoria').with.lengthOf(1)\r\n        done(err);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\ndescribe('[PLATILLOS]', () => {\r\n  test('Debe agregar un platillo', (done) => {\r\n    const json = {\r\n      query:\r\n        \"mutation($data:PlatilloInput){ addPlatillo(data:$data){ _id, name } }\",\r\n      variables: {\r\n        data: {\r\n          name: \"Platillo test\",\r\n          description: \"Descripcion de platillo test\",\r\n          price: 20,\r\n          restaurant: restauranteID,\r\n          categoria: categoriaID\r\n        }\r\n      }\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addPlatillo._id).not.toBeNull();\r\n        body.data.addPlatillo.should.be.an('object')\r\n        platilloID = body.data.addPlatillo._id;\r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n  test('Debe regresar un arreglo de platillos', (done) => {\r\n    const json = {\r\n      query: \"{ getPlatillos { _id, name } }\"\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json,\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getPlatillos).not.toBeNull();\r\n        body.data.should.have.property('getPlatillos').with.lengthOf(1)\r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n  test('Debe regresar un obteto Platilo', (done) => {\r\n    const json = {\r\n      query: \"query($platilloID:ID){ getPlatillo(platilloID:$platilloID){ _id, name } }\",\r\n      variables: {\r\n        platilloID\r\n      }\r\n    };\r\n\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json,\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getPlatillo).not.toBeNull();\r\n        body.data.getPlatillo.should.be.an('object')\r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n})\r\n\r\ndescribe('[PEDIDOS]', () => {\r\n  test('Debe registrar un pedido', (done) => {\r\n    const json = {\r\n      query:\r\n        \"mutation($data:PedidoInput){ addPedido(data:$data){ _id, detail { platillo {_id} } } }\",\r\n      variables: {\r\n        data: {\r\n          restaurant: restauranteID,\r\n          total: 20,\r\n          address: \"una direccion test\",\r\n          metodoPago: 'Efectivo',\r\n          detail: {\r\n            platillo: platilloID,\r\n            cantidad: 1,\r\n            importe: 20\r\n          }\r\n        }\r\n      }\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json,\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.addPedido._id).not.toBeNull();\r\n        body.data.addPedido.should.be.an('object')\r\n        body.data.addPedido.should.have.property('detail').with.lengthOf(1)\r\n        pedidoID = body.data.addPedido._id;\r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n  test('Debe obtener un arreglo de pedidos', (done) => {\r\n    const json = {\r\n      query: \"{ getPedidos { _id } }\",\r\n    };\r\n    request.post(\r\n      {\r\n        url: HOST,\r\n        json,\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      },\r\n      function(err, res, body) {\r\n        should.not.exist(err);\r\n        should.exist(res);\r\n        expect(res.statusCode).toBe(200);\r\n        body.should.have.property(\"data\");\r\n        expect(body.data.getPedidos).not.toBeNull();\r\n        body.data.should.have.property('getPedidos').with.lengthOf(1)\r\n        // body.data.getPedidos[0].should.have.property('detail').with.lengthOf(1)\r\n        done(err);\r\n      }\r\n    );\r\n  })\r\n})"],"file":"server.test.js"}